Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії




ЗВІТ
з лабораторної роботи №3



Виконала:                                                                                        Перевірив:
ст. гр. ПЗПІ-22-9                                                                             Дашенков Д. С.
Крамська Олена






Харків 2024
РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ

1. Мета роботи
Розробити бізнес-логику та функції адміністрування серверної частини програмної системи

2. Хід роботи
2.1 Опис оновлених рішень
1) Оновлення логіки для роботи з користувачами через перевірку ролі "власник" для дій з користувачами як додавання, оновлення та видалення користувачей. Додано повідомлення, якщо користувача не знайдено та відповідні повідомлення про заборону дій.
2) Оновлення логіки для роботи з рецептами через перевірку ролі "власник" для додавання, оновлення та видалення рецептів. Додані відповідні повідомлення.
3) Додаткові перевірки при додаванні рецепту (чи існує обраний контейнер та чи не зайнятий він іншим рецептом), оновленні рецепту (чи існує рецепт, чи новий контейнер існує та чи обраний контейнер не зайнятий іншим рецептом), видаленні рецепту (чи існує рецепт).
4) Оновлення логіки для роботи з сенсорами через перевірку ролі "власник" для додавання та видалення сенсорів.
5) Додаткові перевірки при додаванні сенсора (чи існує контейнер для додавання та чи контейнер вже має сенсор даного типу, бо у контейнері не може бути кількох сенсорів одного типу) та видаленні сенсора (перевірка чи існує сенсор)
6) Додано створення текстового файлу зі вже існуючого звіта з детальною інформацією про нього за допомогою модуля File System.
7) Додано логін користувачей з повідомленнями про успішний вхід або невірно введенні данні.

2.2 Оновлена специфікація API для взаємодії серверної частини з клієнтами

Базовий URL: http://localhost:3000/api/
Формат даних: JSON
Методи HTTP: GET, POST, PUT, DELETE

Таблиця 1 – Приклади методів
 	GET	POST	PUT	DELETE
Users	/api/users	/api/users	/api/users/:id	/api/users/:id
 	 Всі	{
  "username": "user",
  "password": "password",
  "role": "operator",
  "created_by": 1
}	{
  "initiator_id": 1,
  "username": "user17",
  "password": "password",
  "role": "operator"
}	 {
  "initiator_id": 1
}
Recipes	/api/recipes	/api/recipes	/api/recipes/:id	/api/recipes/:id
 	 Всі	{
  "name": "Тестовий рецепт номер три",
  "description": "Опис рецепту",
  "target_temp": 16.5,
  "target_sugar": 20.0,
  "target_alcohol": 10.0,
  "created_by": 1,
  "container_id": 9
}	{
  "name": "Оновлений рецепт",
  "description": "Оновлений опис",
  "target_temp": 22.5,
  "target_sugar": 14.0,
  "target_alcohol": 11.5,
  "container_id": 9,
  "updated_by": 1
}	 {
  "deleted_by": 1
}
Sensors	/api/sensors	/api/sensors	 -----------------------	/api/sensors/:id
 	 Всі	{
  "sensor_name": "Temperature Sensor 1",
  "sensor_type": "temperature",
  "location": "Tank 1",
  "container_id": 4,
  "created_by": 1
}	 ----------------------	 {
  "deleted_by": 1
}
Sensor Readings	/api/sensor-readings	/api/sensor-readings	 -----------------------	/api/sensor-readings/:id
 	 Всі	{
  "sensor_id": 2,
  "value": 23.5,
  "recipe_id": 2
}	 -----------------------	 
Containers	/api/containers	/api/containers	/api/containers/:id	/api/containers/:id
 	 Всі	{
  "name": "Ємність 10",
  "location": "Склад 3",
  "capacity": 10000
}	 {
  "name": "Ємність 10",
  "location": "Новий склад",
  "capacity": 120.5
}	 
Reports	/api/reports	/api/reports	 --------------------	/api/reports/:id
 	 	{
  "name": "Звіт по рецепту",
  "generated_by": 7,
  "content": "Процес виробництва стабільний, відхилень від рецепту нема",
  "recipe_id": 2,
  "container_id": 2
}	 -----------------------	 

-	Створення текстового файлу звіта: 
GET http://localhost:3000/api/reports/:id/download
-	Логін користувачей:
POST http://localhost:3000/api/auth/login  
{
  "username": "admin",
  "password": "admin"
}

3. Фрагменти програмного коду
1) Перевірка на роль власника на прикладі фрагменту коду на створення рецепту з recipeController.js:
exports.createRecipe = async (req, res) => {
  const { name, description, target_temp, target_sugar, target_alcohol, created_by, container_id } = req.body;

  try {
    // перевірка, чи користувач є власником
    const [user] = await User.getById(created_by);
    if (!user || user[0].role !== 'owner') {
      return res.status(403).json({ message: 'Доступ заборонено. Тільки власник може додавати рецепти.' });
    }

    // перевірка існування контейнера
    if (container_id) {
      const [container] = await Container.getById(container_id);
      if (!container || container.length === 0) {
        return res.status(404).json({ message: 'Контейнер із вказаним ID не знайдений.' });
      }

      // перевірка, чи контейнер вже прив’язаний до рецепту
      const [existingRecipe] = await Recipe.getByContainerId(container_id);
      if (existingRecipe && existingRecipe.length > 0) {
        return res.status(400).json({ message: 'Контейнер вже прив’язаний до іншого рецепту.' });
      }
    }

    // створення рецепту
    await Recipe.create(name, description, target_temp, target_sugar, target_alcohol, created_by, container_id);
    res.status(201).json({ message: 'Рецепт успішно створено.' });
  } catch (err) {
    res.status(500).json({ message: 'Помилка створення рецепту.', error: err.message });
  }
};

2) Cтворення текстового файлу звіта у reportController.js:

exports.generateReportFile = async (req, res) => {
  const { id } = req.params;

  try {
    const [report] = await db.promise().query(`
          SELECT 
              r.report_id, 
              r.name, 
              r.content, 
              r.created_at,
              u.username AS generated_by,
              c.name AS container_name, 
              c.location AS container_location, 
              c.capacity,
              rec.name AS recipe_name
          FROM Reports r
          JOIN Users u ON r.generated_by = u.user_id
          LEFT JOIN Containers c ON r.container_id = c.container_id
          LEFT JOIN Recipes rec ON r.recipe_id = rec.recipe_id
          WHERE r.report_id = ?
      `, [id]);

    if (report.length === 0) {
      return res.status(404).json({ message: 'Звіт не знайдено' });
    }

    const reportDetails = report[0];

    const fileContent = `
Звіт №${reportDetails.report_id}
Назва звіту: ${reportDetails.name}
Дата створення: ${new Date(reportDetails.created_at).toLocaleString()}
Автор звіту: ${reportDetails.generated_by}

Деталі контейнера:
Назва: ${reportDetails.container_name || 'Не вказано'}
Локація: ${reportDetails.container_location || 'Не вказано'}
Місткість: ${reportDetails.capacity || 'Не вказано'}

Деталі рецепту:
Назва: ${reportDetails.recipe_name || 'Не вказано'}

Зміст звіту:
${reportDetails.content}
      `.trim();

    const filePath = path.join(__dirname, '../downloads', `report_${id}.txt`);

    fs.writeFileSync(filePath, fileContent, 'utf8');
    res.download(filePath, `report_${id}.txt`, (err) => {
      if (err) {
        console.error('Помилка при завантаженні файлу:', err.message);
        return res.status(500).json({ message: 'Помилка при завантаженні файлу' });
      }
      // fs.unlinkSync(filePath);
    });

  } catch (err) {
    console.error('Помилка створення текстового звіту:', err.message);
    res.status(500).json({ message: 'Помилка створення текстового звіту', error: err.message });
  }
};

4. Графічні ілюстрації (рисунки)
 - UML діаграма прецедентів для серверної частини; 
 
Рисунок 1 – UML діаграма

Висновки: На поточній лабораторній роботі було розроблено бізнес логіку та функції адміністрування серверної частини програми моніторингу виробництва на виноробні, додано нові функції та перевірки.
